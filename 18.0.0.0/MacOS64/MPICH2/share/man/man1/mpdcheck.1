." Text automatically generated by txt2man
.TH mpdcheck 1 "22 February 2010" "" "mpd cmds"
.RS
.SH NAME
\fBmpdcheck \fP- mpdcheck
\fB
.SH FILE
/Users/goodell/svn/mpich2-1.2.1p1-tmp/src/pm/mpd/mpdcheck.py
.SH DESCRIPTION
This script is a work in progress and may change frequently as we work
with users and gain additional insights into how to improve it.
.PP
This script prints useful information about the host on which it runs.
It is here to help us help users detect problems with configurations of
.TP
.B
their computers.
For example, some computers are configured to think
of themselves simply as 'localhost' with 127.0.0.1 as the IP address.
This might present problems if a process on that computer wishes to
identify itself by host and port to a process on another computer.
The process on the other computer would try to contact 'localhost'.
.PP
If you are having problems running parallel jobs via mpd on one or more
hosts, you might try running this script once on each of those hosts.
.PP
Any output with *** at the beginning indicates a potential problem
that you may have to resolve before being able to run parallel jobs
via mpd.
.PP
For help:
mpdcheck \fB-h\fP (or \fB--help\fP)
prints this message
.PP
In the following modes, the \fB-v\fP (verbose) option provides info about what
mpdcheck is doing; the \fB-l\fP (long messages) option causes long informational
messages to print in situations where problems are spotted.
.PP
The three major modes of operation for this program are:
.PP
.nf
.fam C
        mpdcheck
            looks for config problems on 'this' host; prints as nec

        mpdcheck -pc
            print config info about 'this' host, e.g. contents of /etc/hosts, etc.

        mpdcheck -f some_file [-ssh]
            prints info about 'this' host and locatability info about the ones
            listed in some_file as well (note the file might be mpd.hosts);
            the -ssh option can be used in conjunction with the -f option to
            cause ssh tests to be run to each remote host

        mpdcheck -s
            runs this program as a server on one host
        mpdcheck -c server_host server_port
            runs a client on another (or same) host; connects to the specifed
            host/port where you previously started the server

.fam T
.fi
.SH FUNCTIONS
\fBctime\fP(\.\.\.)
\fBctime\fP(seconds) -> string
.RS
.PP
Convert a time in seconds since the Epoch to a string in local time.
This is equivalent to \fBasctime\fP(localtime(seconds)). When the time tuple is
not present, current time as returned by \fBlocaltime\fP() is used.
.RE
.PP
\fBexit\fP(\.\.\.)
\fBexit\fP([status])
.RS
.PP
Exit the interpreter by raising \fBSystemExit\fP(status).
If the status is omitted or None, it defaults to zero (i.e., success).
If the status is numeric, it will be used as the system exit status.
If it is another kind of object, it will be printed and the system
exit status will be one (i.e., failure).
.RE
.PP
\fBgethostbyaddr\fP(\.\.\.)
\fBgethostbyaddr\fP(host) -> (name, aliaslist, addresslist)
.RS
.PP
Return the true host name, a list of aliases, and a list of IP addresses,
.TP
.B
for a host.
The host argument is a string giving a host name or IP number.
.RE
.PP
\fBgethostbyname_ex\fP(\.\.\.)
\fBgethostbyname_ex\fP(host) -> (name, aliaslist, addresslist)
.RS
.PP
Return the true host name, a list of aliases, and a list of IP addresses,
.TP
.B
for a host.
The host argument is a string giving a host name or IP number.
.RE
.PP
\fBgethostname\fP(\.\.\.)
\fBgethostname\fP() -> string
.RS
.PP
Return the current host name.
.RE
.PP
\fBkill\fP(\.\.\.)
\fBkill\fP(pid, sig)
.RS
.PP
Kill a process with a signal.
.RE
.PP
\fBselect\fP(\.\.\.)
\fBselect\fP(rlist, wlist, xlist[, timeout]) -> (rlist, wlist, xlist)
.RS
.PP
Wait until one or more file descriptors are ready for some kind of I/O.
The first three arguments are sequences of file descriptors to be waited for:
rlist -- wait until ready for reading
wlist -- wait until ready for writing
xlist -- wait for an ``exceptional condition''
If only one kind of condition is required, pass [] for the other lists.
A file descriptor is either a socket or file object, or a small integer
gotten from a \fBfileno\fP() method call on one of those.
.PP
The optional 4th argument specifies a timeout in seconds; it may be
.TP
.B
a floating point number to specify fractions of seconds.
If it is absent
or None, the call will never time out.
.PP
The return value is a tuple of three lists corresponding to the first three
arguments; each contains the subset of the corresponding file descriptors
that are ready.
.PP
*** IMPORTANT NOTICE ***
On Windows and OpenVMS, only sockets are supported; on Unix, all file descriptors.
.RE
.PP
\fBsystem\fP(\.\.\.)
\fBsystem\fP(command) -> exit_status
.RS
.PP
Execute the command (a string) in a subshell.
.SH DATA
SIGKILL = 9
__author__ = 'Ralph Butler and Rusty Lusk'
__credits__ = ''
__date__ = 'Mon Feb 22 16:28:13 2010'
__version__ = '$Revision: 1.19 $'
argv = ['/usr/bin/pydoc', 'mpdcheck']
stdout = <open file '<stdout>', mode 'w' at 0x17068>
.SH VERSION
1.19
.SH DATE
Mon Feb 22 16:28:13 2010
.SH AUTHOR
Ralph Butler and Rusty Lusk
.SH CREDITS



