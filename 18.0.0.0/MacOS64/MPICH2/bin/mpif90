#! /bin/bash
#
# (C) 2006 by Argonne National Laboratory.
#     See COPYRIGHT in top-level directory.
#
# mpif90
# Simple script to compile and/or link MPI programs.
# This script knows the default flags and libraries, and can handle
# alternative C compilers and the associated flags and libraries.
# The important terms are:
#    includedir, libdir - Directories containing an *installed* mpich2
#    prefix, execprefix - Often used to define includedir and libdir
#    F90                - Fortran 90 compiler
#    WRAPPER_F90FLAGS      - Any special flags needed to compile 
#    WRAPPER_LDFLAGS       - Any special flags needed to link
#    MPILIBNAME         - Name of the MPI library
#    MPI_OTHERLIBS      - Other libraries needed in order to link 
#    F90_OTHER_LIBS     - Yet more libraries, needed just with F90
#    
# We assume that (a) the C compiler can both compile and link programs
#
# Handling of command-line options:
#   This is a little tricky because some options may contain blanks.
#
# Special issues with shared libraries - todo
#
# --------------------------------------------------------------------------
# Set the default values of all variables.
#
# Directory locations: Fixed for any MPI implementation.
# Set from the directory arguments to configure (e.g., --prefix=/usr/local)
prefix=/userhome/acbuild/fwang/SourceCode/3rdpartycomponents/mcs.anl.gov/MPICH2/1.2.1p1_1/mpich2_MacOS64_install
exec_prefix=${prefix}
sysconfdir=${prefix}/etc
includedir=${prefix}/include
modincdir=${prefix}/include
libdir=${exec_prefix}/lib
opalibdir=${exec_prefix}/lib
#
# Default settings for compiler, flags, and libraries
# Determined by a combination of environment variables and tests within
# configure (e.g., determining whehter -lsocket is needee)
F90="ifort"
F90_LINKPATH_SHL=""
F90CPP=""
#
# Fortran 90 Compiler characteristics
F90INC="-I"
# f90modinc specifies how to add a directory to the search path for modules.
# Some compilers (Intel ifc version 5) do not support this concept, and 
# instead need 
# a specific list of files that contain module names and directories.
# The F90MODINCSPEC is a more general approach that uses <dir> and <file>
# for the directory and file respectively.
F90MODINC="-I"
F90MODINCSPEC=""
F90EXT="f90"
#
WRAPPER_F90FLAGS=""
WRAPPER_LDFLAGS=" "
MPILIBNAME="mpich"
PMPILIBNAME="pmpich"
MPI_OTHERLIBS=" -lpthread      "
NEEDSPLIB="yes"
# MPICH2_VERSION is the version of the MPICH2 library for which mpif90 is intended
MPICH2_VERSION="1.2.1p1"
#
#
# Internal variables
# Show is set to echo to cause the compilation command to be echoed instead 
# of executed.
Show=
#
# End of initialization of variables
#---------------------------------------------------------------------
# Environment Variables.
# The environment variables MPICH_F90 may be used to override the 
# default choices.
# In addition, if there is a file $sysconfdir/mpif90-$F90name.conf, 
# where F90name is the name of the compiler with all spaces replaced by hyphens
# (e.g., "f90 -64" becomes "f90--64", that file is sources, allowing other
# changes to the compilation environment.  See the variables used by the 
# script (defined above)
if [ -n "$MPICH_F90" ] ; then
    F90="$MPICH_F90"
    F90name=`echo $F90 | sed 's/ /-/g'`
    if [ -s $sysconfdir/mpif90-$F90name.conf ] ; then
        . $sysconfdir/mpif90-$F90name.conf
    fi
fi
# Allow a profiling option to be selected through an environment variable
if [ -n "$MPIF90_PROFILE" ] ; then
    profConf=$MPIF90_PROFILE
fi
#
# ------------------------------------------------------------------------
# Argument processing.
# This is somewhat awkward because of the handling of arguments within
# the shell.  We want to handle arguments that include spaces without 
# loosing the spacing (an alternative would be to use a more powerful
# scripting language that would allow us to retain the array of values, 
# which the basic (rather than enhanced) Bourne shell does not.  
#
# Look through the arguments for arguments that indicate compile only.
# If these are *not* found, add the library options

linking=yes
allargs=("$@")
argno=0
cppflags=()
for arg in "$@" ; do
    # Set addarg to no if this arg should be ignored by the C compiler
    addarg=yes
    case "$arg" in 
 	# ----------------------------------------------------------------
	# Compiler options that affect whether we are linking or no
    -c|-S|-E|-M|-MM)
    # The compiler links by default
    linking=no
    ;;
	# ----------------------------------------------------------------
	# Options that control how we use mpif90 (e.g., -show, 
	# -f90=* -config=*
    -echo)
    addarg=no
    set -x
    ;;
    -f90=*)
    F90=`echo A$arg | sed -e 's/A-f90=//g'`
    addarg=no
    ;;
    -show)
    addarg=no
    Show=echo
    ;;
    -config=*)
    addarg=no
    F90name=`echo A$arg | sed -e 's/A-config=//g'`
    if [ -s "$sysconfdir/mpif90-$F90name.conf" ] ; then
        . "$sysconfdir/mpif90-$F90name.conf"
    else
	echo "Configuration file mpif90-$F90name.conf not found"
    fi
    ;;
    -compile-info|-compile_info)
    # -compile_info included for backward compatibility
    Show=echo
    addarg=no
    ;;
    -link-info|-link_info)
    # -link_info included for backward compatibility
    Show=echo
    addarg=no
    ;;
    -v)
    # Pass this argument to the compiler as well.
    echo "mpif90 for MPICH2 version $MPICH2_VERSION"
    # if there is only 1 argument, it must be -v.
    if [ "$#" -eq "1" ] ; then
        linking=no
    fi
    ;;
    -profile=*)
    # Pass the name of a profiling configuration.  As
    # a special case, lib<name>.so or lib<name>.la may be used
    # if the library is in $libdir
    profConf=`echo A$arg | sed -e 's/A-profile=//g'`
    addarg=no
    # Loading the profConf file is handled below
    ;;
    -mpe=*)
    # Pass the name of a profiling configuration; this is a special
    # case for the MPE libs.  See -profile
    profConf=`echo A$arg | sed -e 's/A-mpe=//g'`
    profConf="mpe_$profConf"
    addarg=no
    # Loading the profConf file is handled below
    ;;
    -help)
    NC=`echo "$F90" | sed 's%\/% %g' | awk '{print $NF}' -`
    if [ -f "$sysconfdir/mpixxx_opts.conf" ] ; then
        . $sysconfdir/mpixxx_opts.conf
        echo "    -f90=xxx      - Reset the native compiler to xxx."
    else
        if [ -f "./mpixxx_opts.conf" ] ; then
            . ./mpixxx_opts.conf
            echo "    -f90=xxx      - Reset the native compiler to xxx."
        fi
    fi
    exit 0
    ;;
    # The following are special args used to handle .F files when the
    # Fortran compiler itself does not handle these options
    -I*)
    cppflags[${#cppflags}]="$arg"
    ;;
    -D*)
    cppflags[${#cppflags}]="$arg"
    ;;
    *.F|*.F90|.fpp|.FPP)
# If F90CPP is not empty, then we need to do the following:
#    If any input files have the .F or .F90 extension, then    
#        If F90CPP = false, then
#            generate an error message and exit
#        Use F90CPP to convert the file from .F to .f, using 
#            $TMPDIR/f$$-$count.f as the output file name
#            Replace the input file with this name in the args
# This is needed only for very broken systems
#     
    if [ -n "$F90CPP" ] ; then
        if [ "$F90CPP" = "false" ] ; then
            echo "This Fortran compiler does not accept .F or .F90 files"
	    exit 1
        fi
        addarg=no
	# Remove and directory names and extension
	$ext=`expr "$arg" : '.*\(\..*\)'`
        bfile=`basename $arg $ext`
	# 
	TMPDIR=${TMPDIR:-/tmp}
	# Make sure that we use a valid extension for the temp file.
        tmpfile=$TMPDIR/f$$-$bfile.$F90EXT
        if $F90CPP "${cppflags[@]}" $arg > $tmpfile ; then
            # Add this file to the commandline list
	    count=`expr $count + 1`
	    allargs[${#allargs}]="$tmpfile"
	    rmfiles="$rmfiles $tmpfile"
        else
	    echo "Aborting compilation because of failure in preprocessing step"
	    echo "for file $arg ."
	    exit 1
        fi
    fi
    # Otherwise, just accept the argument
    ;;
    # - end of special handling for .F files

    esac
    if [ $addarg = no ] ; then
        unset allargs[$argno]
    fi
    # Some versions of bash do not accept ((argno++))
    argno=`expr $argno + 1`
done

if [ $# -eq 0 ] ; then
    echo "Error: Command line argument is needed!"
    "$0" -help
    exit 1
fi

# -----------------------------------------------------------------------
# Derived variables.  These are assembled from variables set from the
# default, environment, configuration file (if any) and command-line
# options (if any)

#
# The library lib${MPILIBNAME}f90 contains the f90-specific features,
# such as the module objects and the routines defined by them
# (MPI_SIZEOF is handled in lib${MPILIBNAME)f90, for example).
if [ "$NEEDSPLIB" = yes ] ; then
    mpilibs="-l${MPILIBNAME}f90 -l$PMPILIBNAME -l$MPILIBNAME -lopa"
else
    mpilibs="-l${MPILIBNAME}f90 -l$MPILIBNAME -lopa"
fi
#
# Init with the ones needed by MPI
F90FLAGS="$WRAPPER_F90FLAGS"
LDFLAGS="$WRAPPER_LDFLAGS"
#
# Handle the case of a profile switch
if [ -n "$profConf" ] ; then
    profConffile=
    if [ -s "$libdir/lib$profConf.a" -o -s "$libdir/lib$profConf.so" ] ; then
	mpilibs="-l$profConf $mpilibs"
    elif [ -s "$sysconfdir/$profConf.conf" ] ; then
	profConffile="$sysconfdir/$profConf.conf"
    elif [ -s "$profConf.conf" ] ; then
        profConffile="$profConf.conf"
    else
        echo "Profiling configuration file $profConf.conf not found in $sysconfdir"
    fi
    if [ -n "$profConffile" -a -s "$profConffile" ] ; then
	. $profConffile
	if [ -n "$PROFILE_INCPATHS" ] ; then
	    F90FLAGS="$PROFILE_INCPATHS $F90FLAGS"
        fi
        if [ -n "$PROFILE_PRELIB" ] ; then
	    mpilibs="$PROFILE_PRELIB $mpilibs"
        fi
        if [ -n "$PROFILE_POSTLIB" ] ; then
	    mpilibs="$mpilibs $PROFILE_POSTLIB"
        fi
    fi
fi

# Construct the line to add the include directory (not all compilers 
# use -I, unfortunately)
if [ -z "${F90INC}" ] ; then
    # If there is no path, add a link to the mpif.h file.
    # There *must* be a way to provide the path the any modules (there
    # may be too many to link)
    if [ ! -r mpif.h ] ; then
        #echo "Adding a symbolic link for mpif.h"
	trap "$Show rm -f mpif.h" 0
	# This should really be the (related) f77includedir (see mpif77).
	$Show ln -s ${includedir}/mpif.h mpif.h
	# Remember to remove this file
	rmfiles="$rmfiles mpif.h"
    fi
    F90INCDIRS=
else
    # Normally, F90INC is just -I, but some compilers have used different
    # command line arguments
    F90INCDIRS=${F90INC}${includedir}
fi

# Handle the specification of the directory containing the modules
# For now, these are in the includedir (no choice argument supported)
moduledir=$modincdir
modulelib=${MPILIBNAME}f90
if [ -n "$F90MODINCSPEC" ] ; then
    newarg=`echo A"$F90MODINCSPEC" | \
	sed -e 's/^A//' -e 's%<dir>%'"$moduledir%g" -e 's/<file>/mpi/g'`
    F90MODDIRS="$newarg"
    F90MODLIBS="-l$modulelib"
elif [ -n "$F90MODINC" ] ; then
    F90MODDIRS="${F90MODINC}$moduledir"
    F90MODLIBS="-l$modulelib"
fi

#
# A temporary statement to invoke the compiler
# Place the -L before any args incase there are any mpi libraries in there.
# Eventually, we'll want to move this after any non-MPI implementation 
# libraries

if [ "$linking" = yes ] ; then
    if [ -n "$F90_LINKPATH_SHL" ] ; then
        # Prepend the path for the shared libraries to the library list
        mpilibs="$F90_LINKPATH_SHL$libdir $mpilibs"
    fi
    $Show $F90 $MPICH2_MPIF90_FLAGS $F90FLAGS $LDFLAGS "${allargs[@]}" $F90INCDIRS $F90MODDIRS -L$libdir -L$opalibdir $MPICH2_LDFLAGS $F90MODLIBS $mpilibs $MPI_OTHERLIBS
    rc=$?
else
    $Show $F90 $MPICH2_MPIF90_FLAGS $F90FLAGS "${allargs[@]}" $F90INCDIRS $F90MODDIRS
    rc=$?
fi
if [ -n "$rmfiles" ] ; then
    for file in $rmfiles ; do
        objfile=`basename $file .f`
	if [ -s "${objfile}.o" ] ; then
	    # Rename 
	    destfile=`echo $objfile | sed -e "s/.*$$-//"`
	    mv -f ${objfile}.o ${destfile}.o
	fi
        rm -f $file
    done
    rm -f $rmfiles
fi
exit $rc

