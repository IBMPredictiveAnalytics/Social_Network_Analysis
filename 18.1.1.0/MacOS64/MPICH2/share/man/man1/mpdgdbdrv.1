." Text automatically generated by txt2man
.TH mpdgdbdrv 1 "22 February 2010" "" "mpd cmds"
.RS
.SH NAME
\fBmpdgdbdrv
\fB
.SH FILE
/Users/goodell/svn/mpich2-1.2.1p1-tmp/src/pm/mpd/mpdgdbdrv.py
.SH DESCRIPTION
.TP
.B
This program is not to be executed from the command line.
It is 
exec'd by mpdman to support mpigdb.
.SH FUNCTIONS
\fBctime\fP(\.\.\.)
\fBctime\fP(seconds) -> string
.RS
.PP
Convert a time in seconds since the Epoch to a string in local time.
This is equivalent to \fBasctime\fP(localtime(seconds)). When the time tuple is
not present, current time as returned by \fBlocaltime\fP() is used.
.RE
.PP
\fBexit\fP(\.\.\.)
\fBexit\fP([status])
.RS
.PP
Exit the interpreter by raising \fBSystemExit\fP(status).
If the status is omitted or None, it defaults to zero (i.e., success).
If the status is numeric, it will be used as the system exit status.
If it is another kind of object, it will be printed and the system
exit status will be one (i.e., failure).
.RE
.PP
\fBgetpid\fP(\.\.\.)
\fBgetpid\fP() -> pid
.RS
.PP
Return the current process id
.RE
.PP
\fBkill\fP(\.\.\.)
\fBkill\fP(pid, sig)
.RS
.PP
Kill a process with a signal.
.RE
.PP
\fBselect\fP(\.\.\.)
\fBselect\fP(rlist, wlist, xlist[, timeout]) -> (rlist, wlist, xlist)
.RS
.PP
Wait until one or more file descriptors are ready for some kind of I/O.
The first three arguments are sequences of file descriptors to be waited for:
rlist -- wait until ready for reading
wlist -- wait until ready for writing
xlist -- wait for an ``exceptional condition''
If only one kind of condition is required, pass [] for the other lists.
A file descriptor is either a socket or file object, or a small integer
gotten from a \fBfileno\fP() method call on one of those.
.PP
The optional 4th argument specifies a timeout in seconds; it may be
.TP
.B
a floating point number to specify fractions of seconds.
If it is absent
or None, the call will never time out.
.PP
The return value is a tuple of three lists corresponding to the first three
arguments; each contains the subset of the corresponding file descriptors
that are ready.
.PP
*** IMPORTANT NOTICE ***
On Windows and OpenVMS, only sockets are supported; on Unix, all file descriptors.
.RE
.PP
\fBsig_handler\fP(signum, frame)
.PP
\fBsignal\fP(\.\.\.)
\fBsignal\fP(sig, action) -> action
.RS
.TP
.B
Set the action for the given signal.
The action can be SIG_DFL,
.TP
.B
SIG_IGN, or a callable Python object.
The previous action is
.TP
.B
returned.
See \fBgetsignal\fP() for possible return values.
.PP
*** IMPORTANT NOTICE ***
A signal handler function is called with two arguments:
the first is the signal number, the second is the interrupted stack frame.
.RE
.PP
\fBstrerror\fP(\.\.\.)
\fBstrerror\fP(code) -> string
.RS
.PP
Translate an error code to a message string.
.RE
.PP
\fBwrite\fP(\.\.\.)
\fBwrite\fP(fd, string) -> byteswritten
.RS
.PP
Write a string to a file descriptor.
.SH DATA
EINTR = 4
SIGINT = 2
SIGKILL = 9
SIGUSR1 = 30
__author__ = 'Ralph Butler and Rusty Lusk'
__credits__ = ''
__date__ = 'Mon Feb 22 16:28:13 2010'
__version__ = '$Revision: 1.17 $'
argv = ['/usr/bin/pydoc', 'mpdgdbdrv']
stderr = <open file '<stderr>', mode 'w' at 0x170b0>
stdin = <open file '<stdin>', mode 'r' at 0x17020>
stdout = <open file '<stdout>', mode 'w' at 0x17068>
.SH VERSION
1.17
.SH DATE
Mon Feb 22 16:28:13 2010
.SH AUTHOR
Ralph Butler and Rusty Lusk
.SH CREDITS



